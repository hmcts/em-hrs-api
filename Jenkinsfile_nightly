#!groovy

properties([
  [
    $class       : 'GithubProjectProperty',
    displayName  : 'Evidence Management HRS API',
    projectUrlStr: 'https://github.com/hmcts/em-annotation-app'
  ],
  // H allow predefined but random minute see https://en.wikipedia.org/wiki/Cron#Non-standard_characters
  pipelineTriggers([cron('H 05 * * *')]),
  parameters([
    string(name: 'SecurityRules',
      defaultValue: 'http://raw.githubusercontent.com/hmcts/security-test-rules/master/conf/security-rules.conf',
      description: 'The URL you want to run these tests against'),
  ])
])

@Library("Infrastructure")

def type = "java"
def product = "em"
def component = "hrs-api"

def secrets = [
  's2s-${env}': [
    secret('microservicekey-ccd-gw', 'FUNCTIONAL_TEST_CCD_GW_SERVICE_SECRET')
  ],
  'rpa-${env}': [
    secret('oauth2-client-id', 'OAUTH_CLIENT_ID'),
    secret('show-oauth2-token', 'FUNCTIONAL_TEST_CLIENT_OAUTH_SECRET')
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   version    : '',
   envVariable: envVar
  ]
}

def vaultOverrides = [
  'preview' : 'aat',
  'spreview': 'saat'
]

withNightlyPipeline(type, product, component) {

  // Vars for Kubernetes
  env.IDAM_API_BASE_URI = 'https://idam-api.aat.platform.hmcts.net'
  env.OPEN_ID_API_BASE_URI = 'https://idam-web-public.aat.platform.hmcts.net/o'
  env.S2S_BASE_URI = 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal'
  env.IDAM_REDIRECT_URI = 'https://em-hrs-aat.service.core-compute-aat.internal/oauth2/callback'
  env.DM_STORE_APP_URL = 'http://dm-store-aat.service.core-compute-aat.internal'
  env.CCD_DEF_API = 'http://ccd-definition-store-api-aat.service.core-compute-aat.internal'
  env.CCD_DATA_API_URL = 'http://ccd-data-store-api-aat.service.core-compute-aat.internal'

  env.TEST_URL = "http://em-hrs-api-aat.service.core-compute-aat.internal/"
  overrideVaultEnvironments(vaultOverrides)
  loadVaultSecrets(secrets)
  enableMutationTest()
  enableSecurityScan()
}
