def coverageExclusionList = [
  '**uk/gov/hmcts/reform/em/hrs/Application*',
  '**uk/gov/hmcts/reform/em/hrs/config/**',
  '**uk/gov/hmcts/reform/em/hrs/domain/**',
  '**uk/gov/hmcts/reform/em/hrs/exception/**',
  '**uk/gov/hmcts/reform/em/hrs/repository/**',
  '**uk/gov/hmcts/reform/em/hrs/service/**',
]

jacocoTestReport {
  afterEvaluate {
    classDirectories.setFrom(files(classDirectories.files.collect {
      fileTree(dir: it, exclude: coverageExclusionList)
    }))
  }
}



project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: em-hrs-api"
    property "sonar.projectKey", "uk.gov.hmcts.reform.em.hrs:em-hrs-api"
    property "sonar.exclusions", coverageExclusionList.join(", ")
    property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
  }
}

