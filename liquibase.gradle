

//loading properties file.
Properties liquibaseProps = new Properties()
liquibaseProps.load(new FileInputStream("src/main/resources/liquibase.properties"))

if (!project.hasProperty('runList')) {
  project.ext.runList = 'main'
}


liquibase {
  activities {
    main {
      driver liquibaseProps.getProperty('driver')
      url project.hasProperty("dburl") ? "jdbc:postgresql://$dburl" : liquibaseProps.getProperty('url')
      username project.hasProperty("flyway.user") ? "${rootProject.properties['flyway.user']}" : liquibaseProps.getProperty('username')
      password project.hasProperty("flyway.password") ? "${rootProject.properties['flyway.password']}" : liquibaseProps.getProperty('password')
      changeLogFile liquibaseProps.getProperty('changeLogFile')
      referenceUrl liquibaseProps.getProperty('referenceUrl')
      defaultSchemaName ''
      logLevel 'debug'
      classpath 'src/main/resources/'
    }
    diffLog {
      driver liquibaseProps.getProperty('driver')
      url project.hasProperty("dburl") ? "jdbc:postgresql://$dburl" : liquibaseProps.getProperty('url')
      username project.hasProperty("flyway.user") ? "${rootProject.properties['flyway.user']}" : liquibaseProps.getProperty('username')
      password project.hasProperty("flyway.password") ? "${rootProject.properties['flyway.password']}" : liquibaseProps.getProperty('password')
      changeLogFile liquibaseProps.getProperty('changeLogFile')
      referenceUrl liquibaseProps.getProperty('referenceUrl')
      defaultSchemaName ''
      logLevel 'debug'
      classpath 'src/main/resources/'
    }
  }

  runList = project.ext.runList
}

liquibaseDiff.dependsOn compileJava
liquibaseDiffChangeLog.dependsOn compileJava

task migratePostgresDatabase(dependsOn: 'liquibaseUpdate')
