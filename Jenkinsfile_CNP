#!groovy
import uk.gov.hmcts.contino.AppPipelineDsl
import uk.gov.hmcts.contino.DockerImage
import uk.gov.hmcts.contino.Kubectl
import uk.gov.hmcts.pipeline.TeamConfig
properties([
  [
    $class       : 'GithubProjectProperty',
    displayName  : 'Hearing Recording Service',
    projectUrlStr: 'https://github.com/hmcts/em-hrs-api'
  ],
  pipelineTriggers([
    [$class: 'GitHubPushTrigger']
  ]),
  disableConcurrentBuilds()
])

@Library("Infrastructure")

def type = "java"
def product = "em"
def component = "hrs-api"

def secrets = [
  's2s-${env}': [
    secret('microservicekey-em-hrs-api', 'S2S_KEY'),
    secret('microservicekey-ccd-gw', 'FUNCTIONAL_TEST_CCD_GW_SERVICE_SECRET'),
    secret('microservicekey-em-gw', 'FUNCTIONAL_TEST_CLIENT_S2S_TOKEN')
  ],
  'rpa-${env}': [
    secret('oauth2-client-id', 'OAUTH_CLIENT_ID'),
    secret('show-oauth2-token', 'IDAM_CLIENT_OAUTH_SECRET')
  ],
  'em-hrs-api-${env}': [
      secret('cvp-storage-connection-string', 'CVP_STORAGE_CONNECTION_STRING'),
      secret('cvp-storage-container-name', 'CVP_STORAGE_CONTAINER_NAME'),
      secret('storage-account-primary-connection-string', 'HRS_STORAGEACCOUNT_CONNECTION_STRING'),
      secret('hrs-storage-container-name', 'HRS_CVP_DEST_CONTAINER_NAME'),
      secret('notification-api-key', 'NOTIFICATION_API_KEY'),
      secret('idam-system-user-name', 'HRS_SYSTEM_USER'),
      secret('idam-system-user-password', 'HRS_SYSTEM_USER_PASSWORD'),
      secret('idam-system-user-name', 'IDAM_HRS_INGESTOR_SYSTEM_USER_NAME'),
      secret('idam-system-user-password', 'IDAM_HRS_INGESTOR_SYSTEM_PASSWORD')
   ]
]


def secretsForPreview = [
  's2s-${env}': [
    secret('microservicekey-em-hrs-api', 'S2S_KEY'),
    secret('microservicekey-ccd-gw', 'FUNCTIONAL_TEST_CCD_GW_SERVICE_SECRET'),
    secret('microservicekey-em-gw', 'FUNCTIONAL_TEST_CLIENT_S2S_TOKEN'),
    secret('microservicekey-ccd-gw', 'CCD_API_GATEWAY_S2S_SECRET'),
    secret('microservicekey-ccd-data', 'CCD_DATA_STORE_S2S_SECRET'),
    secret('microservicekey-ccd-definition', 'CCD_DEFINITION_STORE_S2S_SECRET')
  ],
  'rpa-${env}': [
    secret('oauth2-client-id', 'OAUTH_CLIENT_ID'),
    secret('show-oauth2-token', 'IDAM_CLIENT_OAUTH_SECRET')
  ],
  'ccd-${env}'  : [
    secret('ccd-api-gateway-oauth2-client-secret', 'CCD_API_GATEWAY_IDAM_CLIENT_SECRET'),
    secret('ccd-api-gateway-oauth2-client-secret', 'CCD_API_GATEWAY_OAUTH2_CLIENT_SECRET'),
    secret('postcode-info-address-lookup-token', 'ADDRESS_LOOKUP_TOKEN'),
    secret('ccd-admin-web-oauth2-client-secret', 'ADMIN_WEB_IDAM_SECRET'),
    secret('idam-data-store-client-secret', 'IDAM_OAUTH2_DATA_STORE_CLIENT_SECRET'),
    secret('idam-data-store-system-user-username', 'IDAM_DATA_STORE_SYSTEM_USER_USERNAME'),
    secret('idam-data-store-system-user-password', 'IDAM_DATA_STORE_SYSTEM_USER_PASSWORD'),
    secret('microservicekey-ccd-gw', 'CCD_API_GATEWAY_S2S_KEY'),
    secret('definition-store-api-POSTGRES-PASS-V15', 'CCD_DEFINITION_STORE_POSTGRES_PASSWORD'),
    secret('data-store-api-POSTGRES-PASS-V15', 'DATASTORE_POSTGRES_PASSWORD'),
    secret('AppInsightsInstrumentationKey', 'CCD_APPINSIGHTS_INSTRUMENTATION_KEY'),
    secret('app-insights-connection-string', 'APP_INSIGHTS_CONNECTION_STRING'),
    secret('definition-store-api-POSTGRES-USER-V15', 'DEFINITION_STORE_DB_USERNAME'),
    secret('definition-store-api-POSTGRES-PASS-V15', 'DEFINITION_STORE_DB_PASSWORD'),
    secret('dm-store-storage-account-primary-access-key', 'DM_STORE_STORAGE_ACCOUNT_PRIMARY_ACCESS_KEY'),
  ],
  'em-hrs-api-${env}': [
    secret('notification-api-key', 'NOTIFICATION_API_KEY'),
    secret('idam-system-user-name', 'HRS_SYSTEM_USER'),
    secret('idam-system-user-password', 'HRS_SYSTEM_USER_PASSWORD'),
    secret('idam-system-user-name', 'IDAM_HRS_INGESTOR_SYSTEM_USER_NAME'),
    secret('idam-system-user-password', 'IDAM_HRS_INGESTOR_SYSTEM_PASSWORD')
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   version    : '',
   envVariable: envVar
  ]
}

// Vars for Kubernetes Endpoints
env.CCD_DATA_API_URL = 'http://ccd-data-store-api-aat.service.core-compute-aat.internal'
env.CCD_DEFINITION_FILE = 'CCD_HRS_v1.7-AAT.xlsx'
env.CCD_DEF_API = 'http://ccd-definition-store-api-aat.service.core-compute-aat.internal'
env.CVP_CONTAINER_URL = 'https://emhrsapiaat.blob.core.windows.net/cvpsimulator/'
env.IDAM_API_BASE_URI = 'https://idam-api.aat.platform.hmcts.net'
env.IDAM_REDIRECT_URI = 'https://em-hrs-api-aat.service.core-compute-aat.internal/oauth2/callback'
env.OPEN_ID_API_BASE_URI = 'https://idam-web-public.aat.platform.hmcts.net/o'
env.PACT_BROKER_FULL_URL = 'https://pact-broker.platform.hmcts.net'
env.S2S_BASE_URI = 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal'
env.XUI_API_URL = 'https://manage-case.aat.platform.hmcts.net'
env.HRS_VH_DEST_CONTAINER_NAME = 'vhrecordings'
// Feature Flags
env.DELETE_CASE_ENDPOINT_ENABLED = false
env.UPLOAD_CCD_DEF = false


def setPreviewEnvVars() {
  env.CCD_DEF_API = "https://ccd-definition-store-em-hrs-api-pr-${CHANGE_ID}.preview.platform.hmcts.net"
  env.TEST_E2E_URL_WEB = "https://xui-em-hrs-api-pr-${CHANGE_ID}.preview.platform.hmcts.net"
  env.TEST_E2E_API_URI = "https://em-hrs-api-pr-${CHANGE_ID}.preview.platform.hmcts.net"
  env.CCD_API_URL = "https://ccd-data-store-api-em-hrs-api-pr-${CHANGE_ID}.preview.platform.hmcts.net"
  env.CCD_DATA_API_URL = "https://ccd-data-store-api-em-hrs-api-pr-${CHANGE_ID}.preview.platform.hmcts.net"
  env.CCD_GW_API = "http://em-hrs-api-pr-${CHANGE_ID}-ccd-api-gw"
  env.UPLOAD_CCD_DEF = true
}


def vaultOverrides = [
  'preview' : 'aat',
  'spreview': 'saat'
]

withPipeline(type, product, component) {
  enableDbMigration('em-hrs-api')
  overrideVaultEnvironments(vaultOverrides)
  enablePactAs([AppPipelineDsl.PactRoles.CONSUMER, AppPipelineDsl.PactRoles.PROVIDER])
  onNonPR() {
    loadVaultSecrets(secrets)
  }

  onPR(){
    setPreviewEnvVars();
    env.CLOSE_CCD_TEST_CASES = true
    loadVaultSecrets(secretsForPreview)
  }

  env.CVP_STORAGE_URL= "https://emhrsapiaat.blob.core.windows.net/cvpsimulator/"
  before('smoketest:preview') {
    withAksClient('nonprod', product) {
      def dockerImage = new DockerImage(product, component, null, env.BRANCH_NAME, env.GIT_COMMIT, env.LAST_COMMIT_TIMESTAMP)
      def subscription = env.SUBSCRIPTION_NAME
      def aksServiceName = dockerImage.getAksServiceName().toLowerCase()
      def hrsStorageSecret = "storage-secret-hrs-${aksServiceName}"
      def cvpStorageSecret = "storage-secret-cvp-${aksServiceName}"

      def hrsStorageSecretName = "storage-account-hrs-${aksServiceName}"
      def cvpStorageSecretName = "storage-account-cvp-${aksServiceName}"


      def namespace = new TeamConfig(this).getNameSpace(product)
      def kubectl = new Kubectl(this, subscription, namespace)
      kubectl.login()

      // Get storage account details from kubernetes

      env.HRS_BLOB_ACCOUNT_NAME = kubectl.getSecret(hrsStorageSecretName, namespace, "{.data.storage_account_name}")
      env.HRS_BLOB_ACCESS_KEY = kubectl.getSecret(hrsStorageSecret, namespace, "{.data.accessKey}")
      env.HRS_BLOB_ACCOUNT_URL = kubectl.getSecret(hrsStorageSecret, namespace, "{.data.blobEndpoint}")

      env.CVP_BLOB_ACCOUNT_NAME = kubectl.getSecret(cvpStorageSecretName, namespace, "{.data.storage_account_name}")
      env.CVP_BLOB_ACCESS_KEY = kubectl.getSecret(cvpStorageSecret, namespace, "{.data.accessKey}")

      env.CVP_BLOB_ACCOUNT_URL = kubectl.getSecret(cvpStorageSecret, namespace, "{.data.blobEndpoint}")
      env.CVP_STORAGE_URL= "${env.CVP_BLOB_ACCOUNT_URL}cvp/"

      env.HRS_CVP_DEST_CONTAINER_NAME = 'hrs-cvp'
      env.HRS_VH_DEST_CONTAINER_NAME = 'hrs-vh'
      env.CVP_STORAGE_CONTAINER_NAME = 'cvp'

      env.CVP_STORAGE_CONNECTION_STRING= "DefaultEndpointsProtocol=https;AccountName=${env.CVP_BLOB_ACCOUNT_NAME};AccountKey=${env.CVP_BLOB_ACCESS_KEY};EndpointSuffix=core.windows.net"

      env.HRS_STORAGEACCOUNT_CONNECTION_STRING= "DefaultEndpointsProtocol=https;AccountName=${env.HRS_BLOB_ACCOUNT_NAME};AccountKey=${env.HRS_BLOB_ACCESS_KEY};EndpointSuffix=core.windows.net"
      echo "CVP_STORAGE_CONNECTION_STRING : ${env.CVP_STORAGE_CONNECTION_STRING}"
      echo "HRS_STORAGEACCOUNT_CONNECTION_STRING : ${env.HRS_STORAGEACCOUNT_CONNECTION_STRING}"
      echo "HRS_CVP_DEST_CONTAINER_NAME : ${env.HRS_CVP_DEST_CONTAINER_NAME}"
      echo "CVP_STORAGE_CONTAINER_NAME : ${env.CVP_STORAGE_CONTAINER_NAME}"

    }
  }

  onMaster {
    afterSuccess('test') {
      sh '''
            curl https://raw.githubusercontent.com/hmcts/reform-api-docs/master/bin/publish-swagger-docs.sh > publish-swagger-docs.sh
            sh ./publish-swagger-docs.sh
             '''
    }
  }

  onMaster()
    {
    }

  afterAlways('test') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/checkstyle/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/integration/**/*'
  }

  afterAlways('pact-consumer-tests') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/**/*'
  }

  afterAlways('pact-provider-verification') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/**/*'
  }

  afterAlways('smoketest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/**/*'
  }

  afterAlways('smoketest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/**/*'
  }

  afterAlways('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
  }

  afterAlways('functionalTest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
  }

  syncBranchesWithMaster(['demo', 'perftest', 'ithc'])
}



