
buildscript {
  dependencies {
    classpath("net.serenity-bdd:serenity-gradle-plugin:2.3.13")
    classpath("net.serenity-bdd:serenity-single-page-report:3.2.1")
  }
}

plugins {
  id 'application'
  id 'checkstyle'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.0'
  id 'org.springframework.boot' version '2.7.5'
  id 'com.github.ben-manes.versions' version '0.44.0'
  id 'org.sonarqube' version '3.5.0.2730'
  id 'org.flywaydb.flyway' version '9.8.3'
  id 'au.com.dius.pact' version '4.3.6'
  id "info.solidsoft.pitest" version '1.9.0'
  id 'com.github.hmcts.rse-cft-lib' version '0.19.559'
  id 'uk.gov.hmcts.java' version '0.12.39'
  id 'org.owasp.dependencycheck' version '8.0.1'
}

apply plugin: 'net.serenity-bdd.aggregator'


java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

group = 'uk.gov.hmcts.reform.em.hrs'
version = '0.0.1'
mainClassName = 'uk.gov.hmcts.reform.em.hrs.Application'

/***********************************************************************************************************************
 * Source Sets
 **********************************************************************************************************************/

sourceSets {
  //functional tests typically run on AAT environment only. Includes tests to real external endpoints.
  //if running locally, need the relevant docker containers to test against
  //if need to run any locally, then the specific test(s) should be specified
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
    }
  }

  //integrationTest typically tests with mocked external endpoints (so can run locally without dependencies)
  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
    }
  }

  //contractTest typically tests with PACT broker
  contractTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
    }
  }

  //smokeTest should include helloworld & healthcheck. Ideally will also include downstream healthchecks
  //should work locally with docker dependencies, in AAT and production
  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
    }
  }

  test {
    java.srcDir 'src/test/java'
    resources.srcDir file('src/test/resources')
  }
}

/***********************************************************************************************************************
 * Build Tasks
 **********************************************************************************************************************/

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

task functional(type: Test) {
  failFast = true
  testLogging {
    events = ["passed", "failed", "skipped"]
    showStandardStreams = true
  }
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
  include "uk/gov/hmcts/reform/em/hrs/**"
  logger.info("Functional tests info:")
  logger.info('A {} log message', 'info')
}



task integration(type: Test) {
  failFast = true
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
}

task smoke(type: Test) {
  failFast = true
  group = 'Delivery pipeline'
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath

  environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")

}

/***********************************************************************************************************************
 * Code Checks
 **********************************************************************************************************************/

def coverageExclusionList = [
  '**uk/gov/hmcts/reform/em/hrs/Application*',
  '**uk/gov/hmcts/reform/em/hrs/appinsights/**',
  '**uk/gov/hmcts/reform/em/hrs/config/**',
  '**uk/gov/hmcts/reform/em/hrs/domain/**',
  '**uk/gov/hmcts/reform/em/hrs/dto/**',
  '**uk/gov/hmcts/reform/em/hrs/exception/**',
  '**uk/gov/hmcts/reform/em/hrs/job/*Scheduler.java',
  '**uk/gov/hmcts/reform/em/hrs/model/**',
  '**uk/gov/hmcts/reform/em/hrs/storage/HearingRecordingStorageImpl.java',
  '**uk/gov/hmcts/reform/em/hrs/util/debug/HttpHeadersLogging.java',
  '**uk/gov/hmcts/reform/em/hrs/data/migration/PendingMigrationScriptException*',
  '**uk/gov/hmcts/reform/em/hrs/data/migration/FlywayNoOpStrategy*'
]

checkstyle {
  maxWarnings = 0
  toolVersion = '9.2.1'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

jacocoTestReport {
  dependsOn test, integration
  executionData(test, integration)
  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination = file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }

  afterEvaluate {
    classDirectories.setFrom(files(classDirectories.files.collect {
      fileTree(dir: it, exclude: coverageExclusionList)
    }))
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: em-hrs-api"
    property "sonar.projectKey", "uk.gov.hmcts.reform.em.hrs:em-hrs-api"
    property "sonar.exclusions", coverageExclusionList.join(", ")
    property "sonar.coverage.jacoco.xmlReportPaths", jacocoTestReport.reports.xml.destination.path
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    property "sonar.cpd.exclusions", "**/*Scheduler.java"
  }
}

/***********************************************************************************************************************
 * Dependency Management
 **********************************************************************************************************************/




// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'
  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

configurations.all {
  exclude group: 'org.springframework.security', module: 'spring-security-rsa'
  exclude group: 'org.springframework.boot', module: 'spring-boot-starter-security'
  exclude group: 'com.vaadin.external.google',   module: 'android-json'
}
dependencyManagement {
  dependencies {

    dependencySet(group: 'com.google.guava', version: '31.1-jre') {
      // Guava CVE-2018-10237 - Unbounded memory allocation
      entry 'guava'
    }

    //CVE-2022-25857
    dependencySet(group: 'org.yaml', version: '1.33') {
      entry 'snakeyaml'
    }

    dependencySet(group: 'org.springframework.cloud', version: '3.1.5') {
      entry 'spring-cloud-starter-openfeign'
    }

    // CVE-2022-31692 - CVE-2022-31690
    dependencySet(group: 'org.springframework.security', version: '5.7.5') {
      entry 'spring-security-crypto'
      entry 'spring-security-core'
      entry 'spring-security-web'
    }

    //CVE-2022-45143
    dependencySet(group: 'org.apache.tomcat.embed', version: '9.0.69') {
      entry 'tomcat-embed-core'
      entry 'tomcat-embed-websocket'
    }
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://jitpack.io' }
}

def versions = [
  serenity           : '2.6.0',
  serenityreporter   : '2.6.0',
  serenityRestAssured : '2.6.0',
  lombok             : '1.18.20',
  reformLogging      : '5.1.9',
  log4JVersion       : "2.17.1",
  springfoxSwagger   : '2.9.2',
  postgresql         : '42.5.1',
  pact_version       : '3.6.15',
  restAssured        : '4.2.0',
  junit              : '5.8.1',
  junitPlatform      : '1.9.2',
  springSecurity     : '5.7.5',
  shedlock           : '4.34.0'
]

ext.libraries = [
  junit5: [
    "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
    "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
    "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
  ]
]

dependencies {

  def withoutStuff = {
    exclude group: 'com.sun.xml.bind', module: 'jaxb-osgi'
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-security'
    exclude group: 'uk.gov.hmcts.reform', module: 'java-logging-spring'
  }

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-mail'

  implementation group: 'org.springframework.security', name: 'spring-security-oauth2-resource-server', version: versions.springSecurity
  implementation group: 'org.springframework.security', name: 'spring-security-oauth2-client', version: versions.springSecurity
  implementation group: 'org.springframework.security', name: 'spring-security-oauth2-jose', version: versions.springSecurity
  implementation group: 'org.springframework.security', name: 'spring-security-oauth2-core', version: versions.springSecurity
  implementation group: 'org.springframework.security', name: 'spring-security-config', version: versions.springSecurity

  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-bootstrap', version: '3.1.5'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '3.1.5'

  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  implementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  implementation "org.springframework.boot:spring-boot-starter-actuator"
  implementation "org.springframework.boot:spring-boot-starter-aop"
  implementation "org.springframework.boot:spring-boot-starter-json"
  implementation "org.springframework.boot:spring-boot-starter-validation"
  implementation "org.springframework.boot:spring-boot-starter-web"

  implementation group: 'com.github.hmcts', name: 'properties-volume-spring-boot-starter', version: '0.1.1'
//hmcts autho
  implementation group: 'com.github.hmcts', name: 'idam-java-client', version: '2.1.1'
  implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '4.1.1'
  implementation group: 'com.github.hmcts', name: 'auth-checker-lib', version: '2.1.5', {
    exclude group: 'uk.gov.hmcts.reform', module: 'java-logging-spring'
  }


//hmcts ccd
  implementation group: 'com.github.hmcts', name: 'core-case-data-store-client', version: '4.9.1'

//hmcts logging
  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: versions.reformLogging
  implementation group: 'com.github.hmcts.java-logging', name: 'logging-appinsights', version: versions.reformLogging
  implementation group: 'com.github.hmcts.java-logging', name: 'logging-spring', version: versions.reformLogging

//gov notify email service
  implementation group: 'uk.gov.service.notify', name: 'notifications-java-client', version: '3.19.0-RELEASE'


//rest server / API publishing?
  implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.6.14'

//azure components
  implementation group: 'com.azure', name: 'azure-storage-blob', version: '12.20.2'
  implementation group: 'com.azure', name: 'azure-identity', version: '1.7.3'

  // Job scheduling
  implementation group: 'org.quartz-scheduler', name: 'quartz', version: '2.3.2'
  implementation group: 'org.springframework', name: 'spring-context-support'

  implementation group: 'net.javacrumbs.shedlock', name: 'shedlock-spring', version: versions.shedlock
  implementation group: 'net.javacrumbs.shedlock', name: 'shedlock-provider-jdbc-template', version: versions.shedlock

  cftlibImplementation 'org.springframework.boot:spring-boot-devtools'

/***********************************************************************************************************************
 * DATABASE DEPENDENCIES AND SOURCE SETS
 **********************************************************************************************************************/

  implementation group: 'org.postgresql', name: 'postgresql', version: versions.postgresql
  implementation group: 'org.hibernate', name: 'hibernate-core', version: '5.6.7.Final'
  implementation group: 'org.flywaydb', name: 'flyway-core', version: '9.12.0'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
  implementation "org.springframework.boot:spring-boot-starter-jdbc"

  testImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenityRestAssured, withoutStuff
  testImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity, withoutStuff
  testImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
  testImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
  testImplementation group: 'net.serenity-bdd', name: 'serenity-single-page-report', version: versions.serenityreporter
/***********************************************************************************************************************
 * TEST DEPENDENCIES
 **********************************************************************************************************************/

  testImplementation libraries.junit5

  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }

  functionalTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }

  functionalTestImplementation 'com.github.hmcts:em-test-helper:1.21.6'
  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenityRestAssured, withoutStuff


  testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.24.2'
  testImplementation group: 'net.javacrumbs.json-unit', name: 'json-unit-assertj', version: '2.36.1'
  testImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: '1.17.6'
  testImplementation group: 'org.testcontainers', name: 'postgresql', version: '1.17.6'
  testImplementation group: 'com.devskiller', name: 'jfairy', version: '0.6.5', {
    exclude group: 'com.google.guava', module: 'guava'
  }
  testImplementation group: 'org.awaitility', name: 'awaitility', version: '4.2.0'

  functionalTestRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.9.2'
  functionalTestImplementation 'org.junit.vintage:junit-vintage-engine:5.9.2'
  functionalTestImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.3'
  functionalTestRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.3'
  functionalTestImplementation group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
  functionalTestImplementation group: 'io.rest-assured', name: 'json-schema-validator', version: versions.restAssured
  functionalTestImplementation group: 'io.rest-assured', name: 'xml-path', version: versions.restAssured
  functionalTestImplementation group: 'io.rest-assured', name: 'json-path', version: versions.restAssured


  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.3'
  testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.6.3'


  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenityRestAssured, withoutStuff
  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity, withoutStuff
  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-single-page-report', version: versions.serenityreporter

  smokeTestImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity, withoutStuff
  smokeTestImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
  smokeTestImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenityRestAssured, withoutStuff
  smokeTestImplementation group: 'net.serenity-bdd', name: 'serenity-single-page-report', version: versions.serenityreporter
  smokeTestImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
  smokeTestImplementation group: 'com.github.hmcts', name: 'em-test-helper', version: '1.21.5'


/***********************************************************************************************************************
 * TEST SOURCE SETS
 **********************************************************************************************************************/

  functionalTestImplementation sourceSets.main.runtimeClasspath

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  smokeTestImplementation sourceSets.main.runtimeClasspath
  smokeTestImplementation sourceSets.test.runtimeClasspath

  contractTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
  contractTestImplementation group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
  contractTestImplementation group: 'io.rest-assured', name: 'json-schema-validator', version: versions.restAssured
  contractTestImplementation group: 'io.rest-assured', name: 'xml-path', version: versions.restAssured
  contractTestImplementation group: 'io.rest-assured', name: 'json-path', version: versions.restAssured
  contractTestImplementation group: 'au.com.dius', name: 'pact-jvm-consumer-junit5_2.12', version: versions.pact_version
  contractTestImplementation group: 'au.com.dius', name: 'pact-jvm-consumer-java8_2.12', version: versions.pact_version
  contractTestImplementation group: 'au.com.dius', name: 'pact-jvm-provider-junit5', version: '4.0.10'
  contractTestImplementation group: 'au.com.dius', name: 'pact-jvm-provider-gradle', version: '4.0.10'

  contractTestImplementation "org.junit.jupiter:junit-jupiter-api:5.8.1"
  contractTestRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.8.1"
  contractTestImplementation group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.9.2'

  contractTestImplementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  contractTestImplementation sourceSets.main.runtimeClasspath
  contractTestImplementation sourceSets.test.runtimeClasspath

  contractTestImplementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.14'
  contractTestImplementation group: 'org.apache.httpcomponents', name: 'fluent-hc', version: '4.5.14'
}

processFunctionalTestResources {
  duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

processIntegrationTestResources {
  duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

processTestResources {
  duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
/***********************************************************************************************************************
 * Adhoc
 **********************************************************************************************************************/
test {
  useJUnitPlatform()
}

bootJar {
  getArchiveFileName().set(provider {
    'em-hrs-api.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}

task contract(type: Test) {
  group = 'Delivery pipeline'
  description = 'Runs the consumer Pact tests'
  useJUnitPlatform()
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
  include "uk/gov/hmcts/reform/em/hrs/consumer/**"
  systemProperty 'pact.rootDir', "pacts"
  environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

task runAndPublishConsumerPactTests(type: Test){
  logger.lifecycle("Runs pact Tests")
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath

}

runAndPublishConsumerPactTests.dependsOn contract

runAndPublishConsumerPactTests.finalizedBy pactPublish

project.ext {
  pactVersion = getCheckedOutGitCommitHash()
}

static def getCheckedOutGitCommitHash() {
  'git rev-parse --verify --short HEAD'.execute().text.trim()
}

task loadEnvSecrets() {
  doLast {
    if (!project.file('./.aat-env').exists()) {
      new ByteArrayOutputStream().withStream { os ->
        exec {
          commandLine 'az', 'keyvault', 'secret', 'show', '--vault-name', 'em-hrs-api-aat', '-o', 'tsv', '--query', 'value', '--name', 'em-hrs-api-dot-env'
          standardOutput = os
        }
        project.file('./.aat-env').write(new String(os.toString().replace('\n', '').decodeBase64(), java.nio.charset.StandardCharsets.UTF_8))
      }
    }
  }
}

task reloadEnvSecrets(group: 'ccd tasks', dependsOn: [loadEnvSecrets]) {
  doFirst {
    if (project.file('./.aat-env').exists()) {
      project.file('./.aat-env').delete()
    }
  }
}

bootRun {
  doFirst() {
    if (project.file('./.aat-env').exists()) {
      project.file('./.aat-env').readLines().each() {
        def index = it.indexOf("=")
        def key = it.substring(0, index)
        def value = it.substring(index + 1)
        environment key, value
      }
    }
  }
}

functional {
  doFirst() {
    if (project.file('./.aat-env').exists()) {
      project.file('./.aat-env').readLines().each() {
        def index = it.indexOf("=")
        def key = it.substring(0, index)
        def value = it.substring(index + 1)
        environment key, value
      }
    }
  }
}

bootWithCCD {
  dependsOn(loadEnvSecrets)

  doFirst() {
    project.file('./.aat-env').readLines().each() {
      def index = it.indexOf("=")
      def key = it.substring(0, index)
      def value = it.substring(index + 1)
      environment key, value
    }

  }
  environment 'RSE_LIB_ADDITIONAL_DATABASES', 'emhrs'
  environment 'DATA_STORE_S2S_AUTHORISED_SERVICES', 'ccd_gw,ccd_data,ccd_ps,aac_manage_case_assignment,ccd_case_document_am_api,am_role_assignment_service,hmc_cft_hearing_service,prl_citizen_frontend,em_gw,em_hrs_api'
  authMode = uk.gov.hmcts.rse.AuthMode.AAT
}

serenity {
  reports = ["single-page-html"]
}

pact {
  publish {
    pactDirectory = 'pacts'
    pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
    version = project.pactVersion
  }
}

compileJava.dependsOn processResources

pitest {
  targetClasses = ['uk.gov.hmcts.reform.em.hrs.util.*', 'uk.gov.hmcts.reform.em.hrs.service.*', 'uk.gov.hmcts.reform.em.hrs.controller.*', 'uk.gov.hmcts.reform.em.hrs.repository.*', 'uk.gov.hmcts.reform.em.hrs.storage.*']
  targetTests = ['uk.gov.hmcts.reform.em.hrs.util.*', 'uk.gov.hmcts.reform.em.hrs.service.*', 'uk.gov.hmcts.reform.em.hrs.controller.*', 'uk.gov.hmcts.reform.em.hrs.repository.*', 'uk.gov.hmcts.reform.em.hrs.storage.*']
  enableDefaultIncrementalAnalysis = true
  historyInputLocation = 'build/reports/pitest/fastermutationtesting'
  historyOutputLocation = 'build/reports/pitest/fastermutationtestingoutput'
  threads = 15
  testSourceSets = [sourceSets.test, sourceSets.integrationTest]
  mainSourceSets = [sourceSets.main]
  fileExtensionsToFilter.addAll('xml', 'json')
  outputFormats = ['XML', 'HTML', 'CSV']
  mutationThreshold = 0
  coverageThreshold = 0
  jvmArgs = ['-Xms1G', '-Xmx3G']
  timestampedReports = false
  failWhenNoMutations = false
  detectInlinedCode = true
}

// exclude the logback binding is coming in via cftlib
configurations.cftlibTestImplementation {
  exclude group: 'ch.qos.logback', module: 'logback-classic'
}

flyway {
  url = System.getenv('FLYWAY_URL')
  user = System.getenv('FLYWAY_USER')
  password = "'" + System.getenv('FLYWAY_PASSWORD') + "'"
  baselineOnMigrate = true
  baselineVersion = '1'
}

task migratePostgresDatabase(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
  baselineOnMigrate = true
  if (project.hasProperty("dburl")) {
    url = "jdbc:postgresql://${dburl}"
  }
}
