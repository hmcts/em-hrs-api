management:
  endpoint:
    health:
      show-details: "always"
      probes:
        enabled: true
  endpoints:
    web:
      base-path: /
      exposure:
        include: health, info, prometheus
  health:
    readinessstate:
      enabled: true
    livenessstate:
      enabled: true


spring:
  application:
    name: Hearing Recordings Service
  jpa:
    database: postgresql
    show-sql: ${SHOW_SQL:true}
    hibernate:
      ddl-auto: none
    database-platform: org.hibernate.dialect.PostgreSQL95Dialect
    properties:
      hibernate:
        order_inserts: true
        order_updates: true
        jdbc:
          batch_size: 5
          batch_versioned_data: true
  main:
    allow-bean-definition-overriding: true
  liquibase:
    enabled: ${ENABLE_DB_MIGRATE:false}
    change-log: classpath:/db/db.changelog-master.xml
  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5444/emhrs}
    username: ${SPRING_DATASOURCE_USERNAME:emhrs}
    password: ${SPRING_DATASOURCE_PASSWORD:emhrs}
  security:
    oauth2:
      client:
        provider:
          oidc:
            issuer-uri: ${OPEN_ID_API_BASE_URI:http://localhost:5000/o}
        registration:
          oidc:
            client-id: microservicekey-em-hrs-api
            client-secret: ${S2S_KEY:AAAAAAAAAAAAAAAA}

# service-auth-provider-client lib
idam:
  client:
    id: ${OAUTH_CLIENT_ID:webshow} #TODO: ask idam team to create hrs client for us (add to vault once created)
    secret: ${IDAM_CLIENT_OAUTH_SECRET:AAAAAAAAAAAAAAAA}
    redirect_uri: ${IDAM_REDIRECT_URI:http://localhost:8080/oauth2redirect}
    grant_type: password
    scope: openid roles profile
  api:
    url: ${IDAM_API_BASE_URI:http://localhost:5000}
  system-user:
    username: ${HRS_SYSTEM_USER:em.hrs.api@hmcts.net.internal} #TODO: need to create hrs systemUser for each environment
    password: ${HRS_SYSTEM_USER_PASSWORD:Passw0rd!} #password only used locally with docker containers
  s2s-auth:
    url: ${S2S_BASE_URI:http://localhost:4502}
    totp_secret: ${S2S_KEY:AAAAAAAAAAAAAAAA}
    microservice: ${S2S_SERVICE_NAME:em_hrs_api}
  provider:
    service:
      client:
        baseUrl: ${S2S_BASE_URI:http://localhost:4502}
  s2s-authorised:
    services: ${S2S_NAMES_WHITELIST:ccd_gw,em_gw,em_hrs_ingestor}

core_case_data:
  api:
    url: ${CCD_DATA_API_URL:http://localhost:4452}

azure:
  app_insights_key: ${APPINSIGHTS_INSTRUMENTATIONKEY:true}
  application-insights:
    instrumentation-key: ${APPINSIGHTS_INSTRUMENTATIONKEY:d04b52b1-20e5-473a-8ac4-3f6859ea113c}
  storage:
    hrs:
      connection-string: ${STORAGEACCOUNT_PRIMARY_CONNECTION_STRING:DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://localhost:10000/devstoreaccount1}
      blob-container-reference: ${STORAGE_CONTAINER_DOCUMENT_CONTAINER_NAME:emhrstestcontainer}
    cvp:
      connection-string: ${STORAGEACCOUNT_PRIMARY_CONNECTION_STRING:DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://localhost:10000/devstoreaccount1}
      blob-container-reference: ${STORAGE_CONTAINER_DOCUMENT_CONTAINER_NAME:cvptestcontainer}

app-insights:
  dev-mode: off
  request-component: on
  telemetry-component: on

#Below values are examples and needs to updated with correct values
notify:
  apiKey: ${NOTIFICATION_API_KEY:test_key-86d79f79-5045-4df2-87d1-6b7d87b41f6b-a703ea6c-9869-42a7-aaa8-38c98a0cc044}
  email.template: 1e10b560-4a3f-49a7-81f7-c3c6eceab455

