management:
  endpoint:
    health:
      show-details: "always"
      probes:
        enabled: true
  endpoints:
    web:
      base-path: /
      exposure:
        include: health, info, prometheus
  health:
    readinessstate:
      enabled: true
    livenessstate:
      enabled: true


spring:
  application:
    name: Hearing Recordings Service
  jpa:
    database: postgresql
    show-sql: ${SHOW_SQL:false}
    hibernate:
      ddl-auto: none
    database-platform: org.hibernate.dialect.PostgreSQL95Dialect
    properties:
      hibernate:
        show_sql: ${SHOW_SQL:false}
        order_inserts: true
        order_updates: true
        jdbc:
          batch_size: 5
          batch_versioned_data: true
  main:
    allow-bean-definition-overriding: true
  liquibase:
    enabled: ${ENABLE_DB_MIGRATE:false}
    change-log: classpath:/db/db.changelog-master.xml
  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5444/emhrs}
    username: ${SPRING_DATASOURCE_USERNAME:emhrs}
    password: ${SPRING_DATASOURCE_PASSWORD:emhrs}
    hikari:
      maximumPoolSize: ${MAX_POOL_SIZE:25}
      minimumIdle: ${MINIMUM_IDLE:10}
      poolName: EmHrsApiHikariCP
      maxLifetime: ${MAX_LIFETIME:90000}
      connectionTimeout: ${CONNECTION_TIMEOUT:10000}
      keepAliveTime: ${KEEP_ALIVE_TIME:60000}
  security:
    oauth2:
      client:
        provider:
          oidc:
            issuer-uri: ${OPEN_ID_API_BASE_URI:http://localhost:5000/o}
        registration:
          oidc:
            client-id: microservicekey-em-hrs-api
            client-secret: ${S2S_KEY:AAAAAAAAAAAAAAAA}

# service-auth-provider-client lib
idam:
  client:
    id: ${OAUTH_CLIENT_ID:webshow}
    secret: ${IDAM_CLIENT_OAUTH_SECRET:AAAAAAAAAAAAAAAA}
    redirect_uri: ${IDAM_REDIRECT_URI:http://localhost:8080/oauth2redirect}
    grant_type: password
    scope: openid roles profile
  api:
    url: ${IDAM_API_BASE_URI:http://localhost:5000}
  system-user:
    username: ${HRS_SYSTEM_USER:em.hrs.api@hmcts.net.local}
    password: ${HRS_SYSTEM_USER_PASSWORD:localPass0!} #password only used locally with docker containers
  s2s-auth:
    url: ${S2S_BASE_URI:http://localhost:4502}
    totp_secret: ${S2S_KEY:AAAAAAAAAAAAAAAA}
    microservice: ${S2S_SERVICE_NAME:em_hrs_api}
  provider:
    service:
      client:
        baseUrl: ${S2S_BASE_URI:http://localhost:4502}
  s2s-authorised:
    services: ${S2S_NAMES_WHITELIST:ccd_gw,em_gw,em_hrs_ingestor,xui_webapp,ccd,ccd_data}

core_case_data:
  api:
    url: ${CCD_DATA_API_URL:http://localhost:4452}

xui:
  api:
    url: ${XUI_API_URL:https://localhost:1337}

azure:
  cluster_name: ${CLUSTER_NAME:dev-00}
  app_insights_key: ${APPINSIGHTS_INSTRUMENTATIONKEY:true}
  application-insights:
    instrumentation-key: ${APPINSIGHTS_INSTRUMENTATIONKEY:d04b52b1-20e5-473a-8ac4-3f6859ea113c}
  storage:
    hrs:
      connection-string: ${STORAGEACCOUNT_PRIMARY_CONNECTION_STRING:DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://localhost:10000/devstoreaccount1}
      blob-container-reference: ${HRS_STORAGE_CONTAINER_NAME:emhrstestcontainer}
    cvp:
      connection-string: ${CVP_STORAGE_CONNECTION_STRING:DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://localhost:10000/devstoreaccount1}
      blob-container-reference: ${CVP_STORAGE_CONTAINER_NAME:cvptestcontainer}

app-insights:
  dev-mode: off
  request-component: on
  telemetry-component: on

#Below values are examples and needs to updated with correct values
notify:
  apiKey: ${NOTIFICATION_API_KEY:testsimulation-86d79f79-5045-4df2-87d1-6b7d87b41f6b-561aeb25-fb94-49ff-9a60-7864f19e3a4c}
  email.template: 1e10b560-4a3f-49a7-81f7-c3c6eceab455

hrs:
  ingestion-queue-size: 1000
  thread-pool:
    core-size: 5
    max-size: 10
    queue-capacity: 100
  ingestion-interval-in-seconds: 1 # how long between each fired job (per server: 4 servers at 1 seconds = 4 per second)
  ccdupload-interval-in-seconds: 30 # how long between each upload (per server: 4 servers at 30 seconds = 8 per minute)
  allowed-roles: ${ALLOWED_ROLES:caseworker-hrs-searcher}

auth:
  provider:
    service:
      client:
        baseUrl: ${S2S_BASE_URI:http://localhost:4502}

logging:
  level:
    root: INFO
    org:
      hibernate: WARN
      springframework:
        web:
          filter:
            CommonsRequestLoggingFilter: INFO
        beans:
          factory:
            support: INFO
      quartz: INFO
    uk:
      gov:
        hmcts:
          reform:
            logging:
              filters:
                RequestStatusLoggingFilter: WARN
